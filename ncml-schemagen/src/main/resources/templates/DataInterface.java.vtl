package ${group.packageName};

#*
 #%L
 ncml-io
 %%
 Copyright (C) 2020 - 2021 Henrique L. F. de Sousa
 %%
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as
 published by the Free Software Foundation, either version 2.1 of the
 License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Lesser Public License for more details.
 
 You should have received a copy of the GNU General Lesser Public
 License along with this program.  If not, see
 <http://www.gnu.org/licenses/lgpl-2.1.html>.
 #L%
 */
*#
// imports >>
#if ($customContent.imports)
${customContent.imports}##
#else
import io.github.hlfsousa.ncml.annotation.*;
import io.github.hlfsousa.ncml.declaration.*;
import java.math.BigInteger;
import java.util.*;
import ucar.ma2.Array;
#end
// << imports

#if($group.class.simpleName == "SchemaWrapper")
@CDLRoot
#end
@CDLDimensions({
#foreach($dimension in $group.dimensions)
  #set($dimLength = 0)
  #if($dimension.length)
    #set($dimLength = $dimension.length)
  #end
        @CDLDimension(name = "${escapeString.apply($dimension.name)}"#if($dimLength > 0), length = ${dimLength}#end#if($dimension.isUnlimited), unlimited = true#end#if($dimension.isVariableLength), variableLength = true#end)#if($foreach.hasNext),#end
#end
})
public interface ${group.typeName} {
#set($reservedWords = [ "case", "switch", "enum", "if", "class", "interface" ])
#macro(findType $type  $unsigned $isArray)
  #set($primitive = $isArray)
  #if($type == "string" || $type == "String")
    #set($typeName = "String")
    #set($primitive = false)
  #elseif($type == "byte" || $type == "ubyte")
    #if($unsigned)
      #set($typeName = "Short")
    #else
      #set($typeName = "Byte")
    #end
  #elseif($type == "char")
    #if ($isArray)
      #set($typeName = "char")
    #else
      #set($typeName = "Character")
    #end
  #elseif($type == "short" || $type == "ushort")
    #if($unsigned)
      #if ($primitive)
        #set($typeName = "int")
      #else
        #set($typeName = "Integer")
      #end
    #else
      #set($typeName = "Short")
    #end
  #elseif($type == "int" || $type == "uint")
    #if($unsigned)
      #set($typeName = "Long")
    #else
      #if ($primitive)
        #set($typeName = "int")
      #else
        #set($typeName = "Integer")
      #end
    #end
  #elseif($type == "long" || $type == "ulong")
    #if($unsigned)
      #set($typeName = "BigInteger")
      #set($primitive = false)
    #else
      #set($typeName = "Long")
    #end
  #elseif($type == "float")
      #set($typeName = "Float")
  #elseif($type == "double")
      #set($typeName = "Double")
  #elseif($type == "Structure")
    #set($typeName = "Object") // TODO locate type
  #elseif($type == "Sequence")
    #set($typeName = "") // TODO Sequence
  #elseif($type == "opaque")
    #set($typeName = "Object") // TODO locate type
  #elseif($type == "enum1")
    #set($typeName = "") // TODO locate enumTypedef
  #elseif($type == "enum2")
    #set($typeName = "") // TODO locate enumTypedef
  #elseif($type == "enum4")
    #set($typeName = "") // TODO locate enumTypedef
  #end
  #if($primitive && $isArray)
    #set($typeName = $typeName.toLowerCase())
  #end
#end
## INNER INTERFACE (VARIABLES WITH ATTRIBUTES)
#foreach($variable in $group.variables)
  #if(!$variable.dimensions.empty || !$variable.attributes.empty)
    interface ${variable.typeName}Variable<T> extends Variable<T> {

    #foreach($attributeWrapper in $variable.attributes)
      #set($attribute = $attributeWrapper.attribute)
      #set($accessor = "get" + $attributeWrapper.camelCase($attributeWrapper.name))
      #set($modifier = "set" + $attributeWrapper.camelCase($attributeWrapper.name))
      #set($localVar = $attributeWrapper.dromedaryCase($attributeWrapper.name))
      #if($reservedWords.contains($localVar))
        #set($localVar = "_" + $localVar)
      #end
      #set($arrayAttribute = !$attributeWrapper.shapeBrackets.empty)
      #findType($attribute.type $attributeWrapper.unsigned $arrayAttribute)
        @CDLAttribute(name = "${escapeString.apply($attribute.name)}", dataType = "${attribute.type}", unsigned = ${attributeWrapper.unsigned}#if($attribute.value), defaultValue = "${escapeString.apply($attribute.value)}"#end)
        ${typeName}${attributeWrapper.shapeBrackets} ${accessor}();

        void ${modifier}(${typeName}${attributeWrapper.shapeBrackets} ${localVar});

    #end
    }

  #end
#end
## ATTRIBUTES
#foreach($attributeWrapper in $group.attributes)
  #set($attribute = $attributeWrapper.attribute)
  #set($accessor = "get" + $attributeWrapper.camelCase($attributeWrapper.name))
  #set($modifier = "set" + $attributeWrapper.camelCase($attributeWrapper.name))
  #set($localVar = ${attributeWrapper.dromedaryCase($attributeWrapper.name)})
  #if($reservedWords.contains($localVar))
    #set($localVar = "_" + $localVar)
  #end
  #set($arrayAttribute = !$attributeWrapper.shapeBrackets.empty)
  #findType($attribute.type $attributeWrapper.unsigned $arrayAttribute)
    @CDLAttribute(name = "${escapeString.apply($attribute.name)}", dataType = "${attribute.type}", unsigned = ${attributeWrapper.unsigned}#if($attribute.value), defaultValue = "${escapeString.apply($attribute.value)}"#end)
    ${typeName}${attributeWrapper.shapeBrackets} ${accessor}();

    void ${modifier}(${typeName}${attributeWrapper.shapeBrackets} ${localVar});

#end
## VARIABLES
#foreach($varWrapper in $group.variables)
  #set($variable = $varWrapper.variable)
  #set($accessor = "get" + $varWrapper.camelCase($varWrapper.name))
  #set($modifier = "set" + $varWrapper.camelCase($varWrapper.name))
  #set($localVar = $varWrapper.dromedaryCase($varWrapper.name))
  #set($arrayVariable = !$varWrapper.shapeBrackets.empty)
  #findType($variable.type $varWrapper.unsigned $arrayVariable)
  #set($rawType = $typeName)
  #findType($varWrapper.scaledType $varWrapper.unsigned $arrayVariable)
  #set($propType = $typeName)
    @CDLVariable(name = "${escapeString.apply($variable.name)}", dataType = "${variable.type}", unsigned = ${varWrapper.unsigned}#if($variable.shape), shape = { #foreach($dimension in $variable.shape.split(" "))"${dimension}"#if($foreach.hasNext), #end#end }#end)
  #if(!$variable.attribute.empty || !$varWrapper.dimensions.empty)
    #if($varWrapper.mapped)
      #set($propType = "Map<String, " + $varWrapper.typeName + "Variable<" + $typeName + $varWrapper.shapeBrackets + ">>")
    #else
      #set($propType = $varWrapper.typeName + "Variable<" + $typeName + $varWrapper.shapeBrackets +">")
    #end
  #else
    #if($varWrapper.mapped)
      #set($propType = "Map<String, " + $typeName + $varWrapper.shapeBrackets + ">")
    #else
      #set($propType = $typeName + $varWrapper.shapeBrackets)
    #end
  #end
    ${propType} ${accessor}();

    void ${modifier}(${propType} ${localVar}); // dims: $varWrapper.dimensions

#end
## GROUPS
#foreach($childGroup in $group.groups)
  #set($typeName = $childGroup.camelCase($childGroup.typeName))
  #set($accessor = "get" + $childGroup.camelCase($childGroup.name))
  #set($modifier = "set" + $childGroup.camelCase($childGroup.name))
    @CDLGroup(name = "${escapeString.apply($childGroup.nameTag)}")
  #if($childGroup.mapped)
    Map<String, ${typeName}> ${accessor}();

    void ${modifier}(Map<String, ${typeName}> ${childGroup.dromedaryCase($childGroup.name)});
  #else
    ${typeName} ${accessor}();

    void ${modifier}(${typeName} ${childGroup.dromedaryCase($childGroup.name)});
  #end

#end
    // methods >>
$!{customContent.methods}##
    // << methods

}
