package ${group.packageName};

// imports >>
#if ($customContent.imports)
${customContent.imports}
#else
import hsousa.ncml.annotation.*;
import hsousa.ncml.declaration.*;
import java.util.*;
import ucar.ma2.Array;
#end
// << imports

#if($group.class.simpleName == "SchemaWrapper")
@CDLRoot
#end
@CDLDimensions({
#foreach($dimension in $group.dimensions)
  #set($dimLength = 0)
  #if($dimension.length)
    #set($dimLength = $dimension.length)
  #end
        @CDLDimension(name = "${dimension.name}"#if($dimLength > 0), length = ${dimLength}#end#if($dimension.isUnlimited), unlimited = true#end)#if($foreach.hasNext),#end
#end
})
public interface ${group.camelCase($group.name)}  {
#macro(findType $type)
  #set($unsigned = false)
  #if($type == "string" || $type == "String")
    #set($typeName = "String")
  #elseif($type == "byte" || $type == "ubyte")
    #set($typeName = "Byte")
    #set($unsigned = $type.charAt(0) == 'u')
  #elseif($type == "char")
    #set($typeName = "Character")
  #elseif($type == "short" || $type == "ushort")
    #set($typeName = "Short")
    #set($unsigned = $type.charAt(0) == 'u')
  #elseif($type == "int" || $type == "uint")
    #set($typeName = "Integer")
    #set($unsigned = $type.charAt(0) == 'u')
  #elseif($type == "long" || $type == "ulong")
    #set($typeName = "Long")
    #set($unsigned = $type.charAt(0) == 'u')
  #elseif($type == "float")
    #set($typeName = "Float")
  #elseif($type == "double")
    #set($typeName = "Double")
  #elseif($type == "Structure")
    #set($typeName = "Object") // TODO locate type
  #elseif($type == "Sequence")
    #set($typeName = "") // TODO Sequence
  #elseif($type == "opaque")
    #set($typeName = "Object") // TODO locate type
  #elseif($type == "enum1")
    #set($typeName = "") // TODO locate enumTypedef
  #elseif($type == "enum2")
    #set($typeName = "") // TODO locate enumTypedef
  #elseif($type == "enum4")
    #set($typeName = "") // TODO locate enumTypedef
  #end  
#end
#if(!$group.consolidatedVariableAttributes.empty)
  ## INNER INTERFACE (VARIABLES WITH ATTRIBUTES)
  #foreach($variable in $group.variables)
    interface ${variable.camelCase($variable.name)}Variable<T> extends Variable<T> {

    #foreach($attributeWrapper in $variable.attributes)
      #set($attribute = $attributeWrapper.attribute)
      #set($accessor = "get" + $attributeWrapper.camelCase($attributeWrapper.name))
      #set($modifier = "set" + $attributeWrapper.camelCase($attributeWrapper.name))
      #findType($attribute.type)
        @CDLAttribute(name = "${attribute.name}", dataType = "${attribute.type}"#if($attribute.value), defaultValue = "${attribute.value}"#end)
        ${typeName} ${accessor}();

        void ${modifier}(${typeName} ${attributeWrapper.dromedaryCase($attributeWrapper.name)});

    #end
    }

  #end
#end
## ATTRIBUTES
#foreach($attributeWrapper in $group.attributes)
  #set($attribute = $attributeWrapper.attribute)
  #set($accessor = "get" + $attributeWrapper.camelCase($attributeWrapper.name))
  #set($modifier = "set" + $attributeWrapper.camelCase($attributeWrapper.name))
  #findType($attribute.type)
    @CDLAttribute(name = "${attribute.name}", dataType = "${attribute.type}"#if($attribute.value), defaultValue = "${attribute.value}"#end)
    ${typeName} ${accessor}();

    void ${modifier}(${typeName} ${attributeWrapper.dromedaryCase($attributeWrapper.name)});

#end
#foreach($variableContainer in $group.variables)
  #set($variable = $variableContainer.variable)
  #set($accessor = "get" + $variableContainer.camelCase($variableContainer.name))
  #set($modifier = "set" + $variableContainer.camelCase($variableContainer.name))
  #findType($variable.type)
    @CDLVariable(name = "${variable.name}", type = ${typeName}.class, unsigned = ${unsigned}#if($variable.shape), shape = { #foreach($dimension in $variable.shape.split(" "))"${dimension}"#if($foreach.hasNext), #end#end }#end)
  #if(!$variable.attribute.isEmpty())
    ${variableContainer.camelCase($variableContainer.name)}Variable<#if(${variable.shape})Array#else${typeName}#end> ${accessor}();

    void ${modifier}(${variableContainer.camelCase($variableContainer.name)}Variable<#if(${variable.shape})Array#else${typeName}#end> ${variableContainer.dromedaryCase($variableContainer.name)});
  #else
    #if(${variable.shape})
    Array#else${typeName}#end ${accessor}();

    void ${modifier}(#if(${variable.shape})Array#else${typeName}#end ${variableContainer.dromedaryCase($variableContainer.name)});
  #end

#end
## GROUPS
#foreach($childGroup in $group.groups)
  #set($typeName = $childGroup.camelCase($childGroup.name))
  #set($accessor = "get" + $childGroup.camelCase($childGroup.name))
  #set($modifier = "set" + $childGroup.camelCase($childGroup.name))
    @CDLGroup(name = "${childGroup.nameTag}")
    ${typeName} ${accessor}();

    void ${modifier}(${typeName} ${childGroup.dromedaryCase($childGroup.name)});
#end
    // methods >>
$!{customContent.methods}
    // << methods

}
