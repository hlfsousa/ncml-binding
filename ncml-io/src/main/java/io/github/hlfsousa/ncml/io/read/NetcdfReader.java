package io.github.hlfsousa.ncml.io.read;

/*-
 * #%L
 * ncml-io
 * %%
 * Copyright (C) 2020 - 2021 Henrique L. F. de Sousa
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Proxy;
import java.util.Collections;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.github.hlfsousa.ncml.io.RuntimeConfiguration;
import ucar.nc2.Group;
import ucar.nc2.NetcdfFile;
import ucar.nc2.NetcdfFileWriter.Version;
import ucar.nc2.iosp.IOServiceProvider;
import ucar.nc2.jni.netcdf.Nc4Iosp;

public class NetcdfReader<T> {

    private static final Logger LOGGER = LoggerFactory.getLogger(NetcdfReader.class);

    private final Class<T> rootType;

    private final RuntimeConfiguration runtimeConfiguration;

    public NetcdfReader(Class<T> rootType) {
        this(rootType, new RuntimeConfiguration(Collections.emptyMap()));
    }
    
    public NetcdfReader(Class<T> rootType, RuntimeConfiguration runtimeConfiguration) {
        this.rootType = rootType;
        this.runtimeConfiguration = runtimeConfiguration;
    }
    
    @SuppressWarnings("unchecked")
    public T create() {
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        try {
            // is there a VO class, as generated by default?
            // TODO make this a property? remove from reader? redesign reader?
            String valueObjectType = rootType.getCanonicalName() + "VO";
            return (T)classLoader.loadClass(valueObjectType).newInstance();
        } catch (Exception e) {
            return (T) Proxy.newProxyInstance(classLoader, new Class<?>[] { rootType },
                    new GroupHandler(null, false, runtimeConfiguration));
        }
    }

    @SuppressWarnings("unchecked")
    public T read(File file, boolean readOnly) throws IOException {
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        NetcdfFile netcdf;
        try {
            netcdf = NetcdfFile.open(file.getAbsolutePath(), Nc4Iosp.class.getName(), -1, null, null);
        } catch (ReflectiveOperationException e) {
            throw new IllegalStateException("Unable to open NetCDF " + file, e);
        }
        if (readOnly) {
            // if there is a NetcdfWrapper classs, as generated by default, use it
            String netcdfWrapperType = rootType.getCanonicalName() + "Wrapper";
            try {
                T wrapper = (T) classLoader.loadClass(netcdfWrapperType)
                        .getConstructor(Group.class, RuntimeConfiguration.class)
                        .newInstance(netcdf.getRootGroup(), runtimeConfiguration);
                return wrapper;
            } catch (Exception e) {
                LOGGER.debug("Wrapper class {} not found, defaulting to proxy", netcdfWrapperType, e);
            }
        }
        // only proxy editing is possible
        return (T) Proxy.newProxyInstance(classLoader, new Class<?>[] { rootType },
                new GroupHandler(netcdf.getRootGroup(), readOnly, runtimeConfiguration));
    }

}
