package ${group.packageName};

#if ($customContent.imports)
${customContent.imports}
#else
// imports >>
import java.util.*;
import ucar.ma2.Array;
import ucar.nc2.Group;
import ucar.nc2.Variable;
// << imports
#end

public class ${group.camelCase($group.name)}VO implements ${group.camelCase($group.name)} {
#macro(findType $type)
  #set($unsigned = false)
  #if($type == "string" || $type == "String")
    #set($typeName = "String")
  #elseif($type == "byte" || $type == "ubyte")
    #set($typeName = "Byte")
    #set($unsigned = $type.charAt(0) == 'u')
  #elseif($type == "char")
    #set($typeName = "Character")
  #elseif($type == "short" || $type == "ushort")
    #set($typeName = "Short")
    #set($unsigned = $type.charAt(0) == 'u')
  #elseif($type == "int" || $type == "uint")
    #set($typeName = "Integer")
    #set($unsigned = $type.charAt(0) == 'u')
  #elseif($type == "long" || $type == "ulong")
    #set($typeName = "Long")
    #set($unsigned = $type.charAt(0) == 'u')
  #elseif($type == "float")
    #set($typeName = "Float")
  #elseif($type == "double")
    #set($typeName = "Double")
  #elseif($type == "Structure")
    #set($typeName = "Object") // TODO locate type
  #elseif($type == "Sequence")
    #set($typeName = "") // TODO Sequence
  #elseif($type == "opaque")
    #set($typeName = "Object") // TODO locate type
  #elseif($type == "enum1")
    #set($typeName = "") // TODO locate enumTypedef
  #elseif($type == "enum2")
    #set($typeName = "") // TODO locate enumTypedef
  #elseif($type == "enum4")
    #set($typeName = "") // TODO locate enumTypedef
  #end
#end
#macro(declareAttribute $attributeWrapper $indent)
  #set($property = ${attributeWrapper.camelCase($attributeWrapper.name)})
  #set($localVar = ${attributeWrapper.dromedaryCase($attributeWrapper.name)})
  #findType(${attributeWrapper.attribute.type})
${indent}    private ${typeName} ${localVar};

${indent}    @Override
${indent}    public ${typeName} get${property}() {
${indent}        return ${localVar};
${indent}    }

${indent}    @Override
${indent}    public void set${property}(${typeName} ${localVar}) {
${indent}        this.${localVar} = ${localVar};
${indent}    }

#end
#macro(declareArrayVariable $varWrapper)
  #set($property = ${varWrapper.camelCase($varWrapper.name)})
  #set($typeName = $property + "VO")
  #set($intfName = $property + "Variable")
    public static class ${typeName} implements ${intfName}<Array> {

        private Array value;
        
        public static ${typeName} create() {
            return new ${typeName}();
        }
        
        public ${typeName}() {}
        
        @Override
        public Array getValue() {
            return value;
        }
        
        @Override
        public void setValue(Array value) {
            this.value = value;
        }

  #foreach($attributeWrapper in ${varWrapper.attributes})
    #declareAttribute($attributeWrapper, "    ")
  #end
    }

#end

#foreach($varWrapper in $group.variables)
  #if(!${varWrapper.attributes.empty})
    #if(${varWrapper.dimensions.empty})
    // incomplete template: declare scalar variable ${varWrapper.variable.name}, which contains attributes
    #else
      #declareArrayVariable($varWrapper)
    #end

  #end
#end

#if(!${group.variables.empty})
    // additionalFields >>
$!{customContent.additionalFields}
    // << additionalFields

  #foreach($varWrapper in $group.variables)
    #set($property = ${varWrapper.camelCase($varWrapper.name)})
    #set($localVar = ${varWrapper.dromedaryCase($varWrapper.name)})
    #if(${varWrapper.attributes.empty})
    private Array ${localVar};
    
    public Array get${property}() {
        return ${localVar};
    }

    public void set${property}(Array ${localVar}) {
        this.${localVar} = ${localVar};
    }

    #else
      #if(${varWrapper.dimensions.empty})
    // scalar variable $varWrapper.variable.name
        
      #else
        #set($typeName = $property + "VO")
        #set($intfName = $property + "Variable")
    private ${intfName}<Array> ${localVar};

    @SuppressWarnings("unchecked")
    public ${intfName}<Array> get${property}() {
        return ${localVar};
    }

    public void set${property}(${intfName}<Array> ${localVar}) {
        this.${localVar} = ${localVar};
    }

      #end
    #end
  #end
#end
#if(!${group.attributes.empty})
  #foreach($attributeWrapper in ${group.attributes})
    #declareAttribute($attributeWrapper, "/**/")
  #end
#end
#foreach($childGroup in $group.groups)
  #set($typeName = $childGroup.camelCase($childGroup.name))
  #set($accessor = "get" + $childGroup.camelCase($childGroup.name))
  #set($modifier = "set" + $childGroup.camelCase($childGroup.name))
  #set($localVar = ${childGroup.dromedaryCase($childGroup.name)})
  #if($childGroup.mapped)
    private Map<String, ${typeName}> ${localVar};
  
    public Map<String, ${typeName}> ${accessor}() {
        return ${localVar};
    }
    
    public void ${modifier}(Map<String, ${typeName}> ${localVar}) {
        this.${localVar} = ${localVar};
    }
  #else
    private ${typeName} ${localVar};
  
    public ${typeName} ${accessor}() {
        return ${localVar};
    }
    
    public void ${modifier}(${typeName} ${localVar}) {
        this.${localVar} = ${localVar};
    }
  #end

#end

    // additionalMethods >>
$!{customContent.additionalMethods}
    // << additionalMethods

}
